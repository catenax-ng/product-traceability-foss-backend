---
# -- Specifies how many replicas of a deployed pod shall be created during the deployment
# Note: If horizontal pod autoscaling is enabled this setting has no effect
replicaCount: 1

image:
  # -- Overrides the image tag whose default is the chart appVersion.
  tag: "0.0.6"

imagePullSecret:
  # -- Image pull secret to create to [obtain the container image from private registries](https://kubernetes.io/docs/concepts/containers/images/#using-a-private-registry)
  # Note: This value needs to adhere to the [(base64 encoded) .dockerconfigjson format](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/#registry-secret-existing-credentials).
  # Furthermore, if 'imagePullSecret.dockerconfigjson' is defined, it takes precedence over 'imagePullSecrets'.
  dockerconfigjson: ""

# -- Existing image pull secret to use to [obtain the container image from private registries](https://kubernetes.io/docs/concepts/containers/images/#using-a-private-registry)
imagePullSecrets: []

# -- Overrides the charts name
nameOverride: ""

# -- Overrides the releases full name
fullnameOverride: "trace-consumer-controlplane"

serviceAccount:
  # -- Specifies whether a [service account](https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/) should be created per release
  create: true

# -- Whether to [automount kubernetes API credentials](https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#use-the-default-service-account-to-access-the-api-server) into the pod
automountServiceAccountToken: true

# The [pod security context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod) defines privilege and access control settings for a Pod within the deployment
podSecurityContext:
  seccompProfile:
    # -- Restrict a Container's Syscalls with seccomp
    type: RuntimeDefault
  # -- Runs all processes within a pod with a special uid
  runAsUser: 10001
  # -- Processes within a pod will belong to this guid
  runAsGroup: 10001
  # -- The owner for volumes and any files created within volumes will belong to this guid
  fsGroup: 10001

# The [container security context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container) defines privilege and access control settings for a Container within a pod
securityContext:
  capabilities:
    # -- Specifies which capabilities to drop to reduce syscall attack surface
    drop:
      - ALL
    # -- Specifies which capabilities to add to issue specialized syscalls
    add: []
  # -- Whether the root filesystem is mounted in read-only mode
  readOnlyRootFilesystem: false
  # -- Controls [Privilege Escalation](https://kubernetes.io/docs/concepts/security/pod-security-policy/#privilege-escalation) enabling setuid binaries changing the effective user ID
  allowPrivilegeEscalation: false
  # -- Requires the container to run without root privileges
  runAsNonRoot: true
  # -- The container's process will run with the specified uid
  runAsUser: 10001

livenessProbe:
  # -- Whether to enable kubernetes [liveness-probe](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)
  enabled: true

readinessProbe:
  # -- Whether to enable kubernetes readiness-probes
  enabled: true

startupProbe:
  # -- Whether to enable kubernetes startup-probes
  enabled: true
  # -- Minimum consecutive failures for the probe to be considered failed after having succeeded
  failureThreshold: 12
  # -- Number of seconds after the container has started before liveness probes are initiated.
  initialDelaySeconds: 10

## EDC endpoints exposed by the control-plane
edc:
  endpoints:
    ## Default api exposing health checks etc
    default:
      # -- The network port, which the "default" api is going to be exposed by the container, pod and service
      port: "8080"
      # -- The path mapping the "default" api is going to be exposed at
      path: /api
    ## Data management API
    data:
      # -- The network port, which the "data" management api is going to be exposed by the container, pod and service
      port: "8181"
      # -- The path mapping the "data" management api is going to be exposed at
      path: /data
    ## Validation API
    validation:
      # -- The network port, which the "validation" api is going to be exposed by the container, pod and service
      port: "8182"
      # -- The path mapping the "validation" api is going to be exposed at
      path: /validation
    ## Control API
    control:
      # -- The network port, which the "control" api is going to be exposed by the container, pod and service
      port: "9999"
      # -- The path mapping the "control" api is going to be exposed at
      path: /api/controlplane/control
    ## IDS endpoints
    ids:
      # -- The network port, which the "ids" multipart api is going to be exposed by the container, pod and service
      port: "8282"
      # -- The path mapping the "ids" multipart api is going to be exposed at
      path: /BPNL00000003CML1/api/v1/ids
    ## Prometheus endpoint
    metrics:
      # -- The network port, which the prometheus metrics are going to be exposed by the container, pod and service
      port: "9090"
      # -- The path mapping the prometheus metrics are going to be exposed at
      path: /metrics

## Ingress declaration to expose the network service.
ingresses:
  ## Public / Internet facing Ingress
  - enabled: true
    # -- The hostname to be used to precisely map incoming traffic onto the underlying network service
    hostname: trace-consumer-controlplane.dev.demo.catena-x.net
    # -- Additional ingress annotations to add
    annotations:
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    # -- EDC endpoints exposed by this ingress resource
    endpoints:
      - ids
    # -- Defines the [ingress class](https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-class)  to use
    className: "nginx"
    # -- Enables TLS on the ingress resource
    tls: true
    ## Adds [cert-manager](https://cert-manager.io/docs/) annotations to the ingress resource
    certManager:
      clusterIssuer: letsencrypt-prod

  ## Private / Intranet facing Ingress
  - enabled: false
    # -- The hostname to be used to precisely map incoming traffic onto the underlying network service
    hostname: "edc-controlplane.intranet"
    # -- Additional ingress annotations to add
    annotations: {}
    # -- EDC endpoints exposed by this ingress resource
    endpoints:
      - data
      - control
    # -- Defines the [ingress class](https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-class)  to use
    className: ""
    # -- Enables TLS on the ingress resource
    tls: false
    ## Adds [cert-manager](https://cert-manager.io/docs/) annotations to the ingress resource
    certManager:
      # -- If preset enables certificate generation via cert-manager namespace scoped issuer
      issuer: ""
      # -- If preset enables certificate generation via cert-manager cluster-wide issuer
      clusterIssuer: ""

# -- [Resource management](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/) applied to the deployed pod
resources:
  limits:
    cpu: 1.5
    memory: 512Mi
  requests:
    cpu: 500m
    memory: 512Mi

autoscaling:
  # -- Enables [horizontal pod autoscaling](https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/)
  enabled: false
  # -- Minimal replicas if resource consumption falls below resource threshholds
  minReplicas: 1
  # -- Maximum replicas if resource consumption exceeds resource threshholds
  maxReplicas: 100
  # -- targetAverageUtilization of cpu provided to a pod
  targetCPUUtilizationPercentage: 80
  # -- targetAverageUtilization of memory provided to a pod
  targetMemoryUtilizationPercentage: 80

# -- [Node-Selector](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector) to constrain the Pod to nodes with specific labels.
nodeSelector: {}

# -- [Tolerations](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/) are applied to Pods to schedule onto nodes with matching taints.
tolerations: []

# -- [Affinity](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity) constrains which nodes the Pod can be scheduled on based on node labels.
affinity: {}

logging:
  # -- EDC logging.properties configuring the [java.util.logging subsystem](https://docs.oracle.com/javase/7/docs/technotes/guides/logging/overview.html#a1.8)
  properties: |-
    .level=INFO
    org.eclipse.dataspaceconnector.level=ALL
    handlers=java.util.logging.ConsoleHandler
    java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter
    java.util.logging.ConsoleHandler.level=ALL
    java.util.logging.SimpleFormatter.format=[%1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS] [%4$-7s] %5$s%6$s%n

configuration:
  # -- EDC configuration.properties configuring aspects of the [eclipse-dataspaceconnector](https://github.com/eclipse-dataspaceconnector/DataSpaceConnector)
  properties: |-
    web.http.default.port=8080
    web.http.default.path=/api
    web.http.data.port=8181
    web.http.data.path=/data
    web.http.validation.port=8182
    web.http.validation.path=/validation
    web.http.control.port=9999
    web.http.control.path=/api/controlplane/control
    web.http.ids.port=8282
    web.http.ids.path=/BPNL00000003CML1/api/v1/ids
    edc.api.control.auth.apikey.key=X-Api-Key
    # Postgresql related configuration
    edc.datasource.asset.name=asset
    edc.datasource.asset.url=jdbc:postgresql://traceability-database-postgresql-hl:5432/edc?currentSchema=consumer
    edc.datasource.asset.user=edc
    edc.datasource.contractdefinition.name=contractdefinition
    edc.datasource.contractdefinition.url=jdbc:postgresql://traceability-database-postgresql-hl:5432/edc?currentSchema=consumer
    edc.datasource.contractdefinition.user=edc
    edc.datasource.contractnegotiation.name=contractnegotiation
    edc.datasource.contractnegotiation.url=jdbc:postgresql://traceability-database-postgresql-hl:5432/edc?currentSchema=consumer
    edc.datasource.contractnegotiation.user=edc
    edc.datasource.policy.name=policy
    edc.datasource.policy.url=jdbc:postgresql://traceability-database-postgresql-hl:5432/edc?currentSchema=consumer
    edc.datasource.policy.user=edc
    edc.datasource.transferprocess.name=transferprocess
    edc.datasource.transferprocess.url=jdbc:postgresql://traceability-database-postgresql-hl:5432/edc?currentSchema=consumer
    edc.datasource.transferprocess.user=edc
    edc.hostname=trace-consumer-controlplane.dev.demo.catena-x.net
    edc.ids.catalog.id=urn:catalog:default
    edc.ids.description="Eclipse Dataspace Connector"
    edc.ids.endpoint=https://trace-consumer-controlplane.dev.demo.catena-x.net/BPNL00000003CML1/api/v1/ids
    ids.webhook.address=https://trace-consumer-controlplane.dev.demo.catena-x.net
    edc.ids.id=urn:connector:edc
    edc.ids.security.profile=base
    edc.ids.title="Eclipse Dataspace Connector"
    edc.receiver.http.endpoint=http://trace-api-wrapper:9192/callback/endpoint-data-reference
    edc.transfer.proxy.endpoint=https://trace-consumer-controlplane.dev.demo.catena-x.net/api/public
    edc.transfer.proxy.token.verifier.publickey.alias=token-signer-cert-dev
    edc.transfer.proxy.token.signer.privatekey.alias=token-signer-cert-key-dev
    edc.vault.hashicorp.url=https://vault.demo.catena-x.net
    edc.vault.hashicorp.health.check.enabled=true
    edc.vault.hashicorp.health.check.standby.ok=true
    edc.vault.hashicorp.api.secret.path=/v1/traceability-foss
    edc.oauth.public.key.alias=daps-cert-dev
    edc.oauth.private.key.alias=daps-cert-key-dev
    edc.oauth.client.id=60:99:BC:FC:9B:F9:5D:58:C4:94:1D:02:65:3E:88:B6:F9:C7:23:B3:keyid:60:99:BC:FC:9B:F9:5D:58:C4:94:1D:02:65:3E:88:B6:F9:C7:23:B3
    edc.oauth.provider.audience=idsc:IDS_CONNECTORS_ALL
    edc.oauth.provider.jwks.url=https://daps1.int.demo.catena-x.net/.well-known/jwks.json
    edc.oauth.token.url=https://daps1.int.demo.catena-x.net/token
