---
# Default values for api-wrapper.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  ##
  ## Which api-wrapper container image to use.
  ##
  repository: ghcr.io/catenax-ng/catenax-at-home/consumer-api-wrapper
  pullPolicy: IfNotPresent
  ##
  ## Overrides the image tag whose default is the chart appVersion.
  ##
  tag: "0.0.4"

##
## Image pull secret to create to obtain the container image
## Note: 'imagePullSecret.dockerconfigjson' takes precedence if configured together with 'imagePullSecrets'
##
imagePullSecret:
  dockerconfigjson: ""

##
## Existing image pull secret to use to obtain the container image
##
imagePullSecrets: []

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  ##
  ## Specifies whether a service account should be created per release
  ##
  create: true
  ##
  ## Annotations to add to the service account
  ##
  annotations: {}
  ##
  ## The name of the service account to use.
  ## If not set and create is true, a name is generated using the fullname template
  ##
  name: ""

podAnnotations: {}

podSecurityContext:
  runAsUser: 10001
  seccompProfile:
    type: RuntimeDefault

# Following Catena-X Helm Best Practices @url: https://catenax-ng.github.io/docs/kubernetes-basics/helm
# @url: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
securityContext:
  allowPrivilegeEscalation: false
  runAsNonRoot: true
  runAsUser: 10001
  runAsGroup: 3000
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: false

##
## Whether to enable kubernetes liveness-probes
##
livenessProbe:
  enabled: true

##
## Whether to enable kubernetes readiness-probes
##
readinessProbe:
  enabled: true

##
## Whether to enable kubernetes startup-probes
##
startupProbe:
  enabled: true

##
## EDC endpoints exposed by the data-plane
##
edc:
  endpoints:
    # Default api for client communications
    default:
      port: "9191"
      path: /api
      ingress: false
    # Callback endpoint for EDC
    callback:
      port: "9292"
      path: /callback
      ingress: false

##
## Service to expose the running application on a set of Pods as a network service.
##
service:
  type: ClusterIP

networkPolicy:
  enabled: false

##
## Ingress declaration to publicly expose the network service.
##
ingress:
  ##
  ## Set to true to enable ingress record generation
  ##
  enabled: false
  ##
  ## Defines the ingress class to use https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-class
  ##
  className: ""
  ##
  ## Enables TLS on the ingress resource
  ##
  tls: false

  ##
  ## Adds cert-manager annotations to the ingress
  ##
  certManager:
    ##
    ## If preset enables certificate generation via cert-manager namespace scoped issuer
    ##
    issuer: ""
    ##
    ## If preset enables certificate generation via cert-manager cluster-wide issuer
    ##
    clusterIssuer: ""

  ##
  ## Additional ingress annotations to add
  ##
  annotations: {}

  ##
  ## The hostname to be used to precisely map incoming traffic onto the underlying network service
  ##
  hostname: "api-wrapper.local"

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
#   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

##
## EDC logging.properties configuring the java.util.logging subsystem
##
logging:
  properties: |-
    .level=INFO
    org.eclipse.dataspaceconnector.level=ALL
    handlers=java.util.logging.ConsoleHandler
    java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter
    java.util.logging.ConsoleHandler.level=ALL
    java.util.logging.SimpleFormatter.format=[%1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS] [%4$-7s] %5$s%6$s%n

##
## EDC & API-Wrapper configuration.properties
##
## For the EDC configuration consult the eclipse-dataspaceconnector documentation for further details: https://github.com/eclipse-dataspaceconnector/DataSpaceConnector
##
configuration:
  properties: |-
    # edc.api.control.auth.apikey.key=
    # edc.api.control.auth.apikey.value=
    # edc.core.retry.backoff.max=
    # edc.core.retry.backoff.min=
    # edc.core.retry.retries.max=
    # edc.core.system.health.check.liveness-period=
    # edc.core.system.health.check.readiness-period=
    # edc.core.system.health.check.startup-period=
    # edc.core.system.health.check.threadpool-size=
    # edc.fs.config=
    # edc.hostname=
    # edc.web.rest.cors.enabled=
    # edc.web.rest.cors.headers=
    # edc.web.rest.cors.methods=
    # edc.web.rest.cors.origins=
    # wrapper.auth.basic.user-x=password-x
    # wrapper.consumer.edc.control.url=
    # wrapper.consumer.edc.datamanagement.url=
    # wrapper.consumer.edc.apikey.name=
    # wrapper.consumer.edc.apikey.value=
