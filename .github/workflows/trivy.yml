name: "Trivy"

on:
  workflow_dispatch:
  # Trigger manually
  workflow_run:
    workflows: [Publish docker image]
    types: [completed]
    branches: [main]

jobs:
  prepare-env:
    runs-on: ubuntu-latest
    steps:
      - name: Set commit SHA
        run: |
          if [ -z "${{ github.event.workflow_run.head_sha }}" ]; then
            echo check_sha=$GITHUB_SHA >> $GITHUB_ENV
          else
            echo check_sha=${{ github.event.workflow_run.head_sha }} >> $GITHUB_ENV
          fi

  analyze-config:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ env.check_sha }}

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "config"
          exit-code: "1"
          hide-progress: false
          format: "sarif"
          output: "trivy-results1.sarif"
          severity: "CRITICAL,HIGH"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results1.sarif"

  analyze-product-traceability-foss-backend:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # It's also possible to scan your private registry with Trivy's built-in image scan.
      # All you have to do is set ENV vars.
      # Docker Hub needs TRIVY_USERNAME and TRIVY_PASSWORD.
      # You don't need to set ENV vars when downloading from a public repository.
      # For public images, no ENV vars must be set.
      - name: Run Trivy vulnerability scanner
        if: always()
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/catenax-ng/product-traceability-foss-backend:${{ env.check_sha }}
          trivyignores: "./.github/workflows/.trivyignore"
          format: "sarif"
          output: "trivy-results2.sarif"
          exit-code: "1"
          severity: "CRITICAL,HIGH"

      - name: Upload Trivy scan results to GitHub Security tab
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results2.sarif"
